{"version":3,"file":"static/js/479.80227486.chunk.js","mappings":"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","sources":["components/BasicCustomer/BasicApp.js","components/Customer/Login/Login.js","components/Customer/Register/Register.js"],"sourcesContent":["import React, { useEffect, useState, Suspense, lazy } from 'react';\r\nimport { Routes, Route, Navigate } from 'react-router-dom';\r\nimport Register from '../Customer/Register/Register';\r\nimport Login from '../Customer/Login/Login';\r\n\r\nconst BasicBrands = lazy(() => import('./BasicBrands/BasicBrands'));\r\nconst BasicViewCart = lazy(() => import('./BasicViewCart/BasicViewCart'));\r\nconst BasicCheckout = lazy(() => import('./BasicCheckout/BasicCheckout'));\r\nconst BasicInvoice = lazy(() => import('./BasicInvoice/BasicInvoice'));\r\nconst BasicNavbar = lazy(() => import('./BasicNavbar/BasicNavbar'));\r\nconst BasicSupplier = lazy(() => import('./BasicSupplier/BasicSupplier'));\r\nconst BasicOrderHistory = lazy(() => import('./BasicOrderHistory/BasicOrderHistory'));\r\n\r\nconst BasicApp = () => {\r\n  const [customerDetails, setCustomerDetails] = useState({ username: '', mobile_number: '' });\r\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('authToken'));\r\n  const [error, setError] = useState(null);\r\n \r\n  const fetchCustomerDetails = async () => {\r\n    const token = localStorage.getItem('authToken');\r\n    try {\r\n      const response = await fetch('https://prasad-gz5p.onrender.com/api/user/details/', {\r\n        headers: { 'Authorization': `Token ${token}` },\r\n      });\r\n \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch customer details`);\r\n      }\r\n \r\n      const data = await response.json();\r\n      setCustomerDetails({ username: data.username, mobile_number: data.mobile_number });\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n \r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      fetchCustomerDetails();\r\n    }\r\n  }, [isAuthenticated]);\r\n \r\n  const handleLogout = async () => {\r\n    const token = localStorage.getItem('authToken');\r\n \r\n    try {\r\n      await fetch('https://prasad-gz5p.onrender.com/api/logout/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Token ${token}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      localStorage.removeItem('authToken');\r\n      setIsAuthenticated(false);\r\n    } catch (error) {\r\n      console.error('Logout failed:', error);\r\n    }\r\n  };\r\n \r\n  const handleLoginSuccess = () => {\r\n    setIsAuthenticated(true);\r\n  };\r\n \r\n  return (\r\n    <>\r\n      {isAuthenticated && (\r\n        <Suspense fallback={<div>Loading Navbar...</div>}>\r\n          <BasicNavbar  \r\n            userName={customerDetails.username}\r\n            onLogout={handleLogout}\r\n            className=\"nav-styles\"\r\n          />\r\n        </Suspense>\r\n      )}\r\n    \r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Navigate to={isAuthenticated ? \"/bbrands\" : \"/login\"} />} />\r\n          <Route path=\"/login\" element={isAuthenticated ? <Navigate to=\"/bbrands\" /> : <Login onLoginSuccess={handleLoginSuccess} />} />\r\n          <Route path=\"/register\" element={<Register />} />\r\n          <Route path=\"/bbrands\" element={isAuthenticated ? <BasicBrands /> : <Navigate to=\"/login\" />} />\r\n          <Route path=\"/border-history\" element={isAuthenticated ? <BasicOrderHistory /> : <Navigate to=\"/login\" />} />\r\n          <Route path=\"/bView-Cart\" element={isAuthenticated ? <BasicViewCart /> : <Navigate to=\"/login\" />} />\r\n          <Route path=\"/bcheckout\" element={isAuthenticated ? <BasicCheckout /> : <Navigate to=\"/login\" />} />\r\n          <Route path=\"/binvoice\" element={isAuthenticated ? <BasicInvoice /> : <Navigate to=\"/login\" />} />\r\n          <Route path=\"/bsupplier\" element={isAuthenticated ? <BasicSupplier /> : <Navigate to=\"/login\" />} />\r\n          {/* Add more routes as needed */}\r\n        </Routes>\r\n      </Suspense>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BasicApp;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport './Login.css';\r\n\r\nconst Login = ({ onLoginSuccess }) => {\r\n  const [formData, setFormData] = useState({\r\n    mobile_number: '',\r\n    password: '',\r\n  });\r\n\r\n  const [error, setError] = useState(null);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n \r\n    setLoading(true);\r\n    try {\r\n      // Login API call\r\n      const loginResponse = await fetch('https://prasad-gz5p.onrender.com/api/login/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n \r\n      if (!loginResponse.ok) {\r\n        const errorData = await loginResponse.json();\r\n        throw new Error(errorData.message || 'Login failed');\r\n      }\r\n \r\n      const { token } = await loginResponse.json();\r\n      localStorage.setItem('authToken', token);\r\n      console.log(token)\r\n      // Check for specific mobile number and password for Admin\r\n      if (formData.mobile_number === '9848098480' && formData.password === 'shiva') {\r\n        setError(null);\r\n        onLoginSuccess('admin'); // Pass role as 'admin'\r\n        navigate('/Admin-Home');\r\n      } else {\r\n        // Now trigger the /home/ API call to check for customer redirection\r\n        const homeResponse = await fetch('https://prasad-gz5p.onrender.com/api/home/', {\r\n          headers: {\r\n            'Authorization': `Token ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n \r\n        if (!homeResponse.ok) {\r\n          throw new Error('Failed to verify home redirection.');\r\n        }\r\n \r\n        const homeData = await homeResponse.json();\r\n \r\n        // Check if redirect is \"supplier_customer_home\"\r\n        if (homeData.redirect === 'supplier_customer_home') {\r\n          setError(null);\r\n          onLoginSuccess('customer'); // Pass role as 'customer'\r\n          navigate('/customer-home');\r\n        }else if(homeData.redirect === 'customer_home'){\r\n          setError(null);\r\n          onLoginSuccess('BasicCustomer'); // Pass role as 'customer'\r\n          navigate('/bbrands');\r\n        } else {\r\n          throw new Error('Invalid redirection.');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='mainContainer010'>\r\n      <div className=\"login-page010\">\r\n        <div className=\"container010\">\r\n          <h1 className=\"heading010\">Login</h1>\r\n          {error && <p style={{ color: 'red' }}>{error}</p>}\r\n          <form onSubmit={handleSubmit} className=\"form010\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"mobile_number\"\r\n              placeholder=\"Mobile Number\"\r\n              value={formData.mobile_number}\r\n              onChange={handleChange}\r\n              required\r\n              className=\"input010\"\r\n            />\r\n            <div className=\"password-container010\">\r\n              <input\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                name=\"password\"\r\n                placeholder=\"Password\"\r\n                value={formData.password}\r\n                onChange={handleChange}\r\n                required\r\n                className=\"input010\"\r\n              />\r\n              <span\r\n                className=\"password-toggle010\"\r\n                onClick={() => setShowPassword(!showPassword)}\r\n              >\r\n                <FontAwesomeIcon icon={showPassword ? faEye : faEyeSlash}  className='eye'/>\r\n              </span>\r\n            </div>\r\n            <button type=\"submit\" className=\"login-button010\" disabled={loading}>\r\n              {loading ? 'Loading...' : 'Login'}\r\n            </button>\r\n          </form>\r\n          <p>\r\n            Don't have an account?\r\n            <button\r\n              onClick={() => navigate('/register')}\r\n              className=\"register-button010\"\r\n            >\r\n              Register here\r\n            </button>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\n// import './Login.css';\r\n \r\n// const Login = ({ onLoginSuccess }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     mobile_number: '',\r\n//     password: '',\r\n//   });\r\n \r\n//   const [error, setError] = useState(null);\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const navigate = useNavigate();\r\n \r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n \r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n \r\n//     setLoading(true);\r\n//     try {\r\n//       // Login API call\r\n//       const loginResponse = await fetch('https://prasad-gz5p.onrender.com/api/login/', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(formData),\r\n//       });\r\n \r\n//       if (!loginResponse.ok) {\r\n//         const errorData = await loginResponse.json();\r\n//         throw new Error(errorData.message || 'Login failed');\r\n//       }\r\n \r\n//       const { token } = await loginResponse.json();\r\n//       localStorage.setItem('authToken', token);\r\n \r\n//       // Check for specific mobile number and password for Admin\r\n//       if (formData.mobile_number === '9848098480' && formData.password === 'shiva') {\r\n//         setError(null);\r\n//         onLoginSuccess('admin'); // Pass role as 'admin'\r\n//         navigate('/Admin-Home');\r\n//       } else {\r\n//         // Now trigger the /home/ API call to check for customer redirection\r\n//         const homeResponse = await fetch('https://prasad-gz5p.onrender.com/api/home/', {\r\n//           headers: {\r\n//             'Authorization': `Token ${token}`,\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//         });\r\n \r\n//         if (!homeResponse.ok) {\r\n//           throw new Error('Failed to verify home redirection.');\r\n//         }\r\n \r\n//         const homeData = await homeResponse.json();\r\n \r\n//         // Check if redirect is \"supplier_customer_home\"\r\n//         if (homeData.redirect === 'supplier_customer_home') {\r\n//           setError(null);\r\n//           onLoginSuccess('customer'); // Pass role as 'customer'\r\n//           navigate('/customer-home');\r\n//         }else if(homeData.redirect === 'customer_home'){\r\n//           setError(null);\r\n//           onLoginSuccess('BasicCustomer'); // Pass role as 'customer'\r\n//           navigate('/bbrands');\r\n//         } else {\r\n//           throw new Error('Invalid redirection.');\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       setError(error.message);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n \r\n//   return (\r\n//     <div className='mainContainer010'>\r\n//       <div className=\"login-page010\">\r\n//         <div className=\"container010\">\r\n//           <h1 className=\"heading010\">Customer Login</h1>\r\n//           {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//           <form onSubmit={handleSubmit} className=\"form010\">\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"mobile_number\"\r\n//               placeholder=\"Mobile Number\"\r\n//               value={formData.mobile_number}\r\n//               onChange={handleChange}\r\n//               required\r\n//               className=\"input010\"\r\n//             />\r\n//             <div className=\"password-container010\">\r\n//               <input\r\n//                 type={showPassword ? \"text\" : \"password\"}\r\n//                 name=\"password\"\r\n//                 placeholder=\"Password\"\r\n//                 value={formData.password}\r\n//                 onChange={handleChange}\r\n//                 required\r\n//                 className=\"input010\"\r\n//               />\r\n//               <span\r\n//                 className=\"password-toggle010\"\r\n//                 onClick={() => setShowPassword(!showPassword)}\r\n//               >\r\n//                 <FontAwesomeIcon icon={showPassword ? faEye : faEyeSlash} />\r\n//               </span>\r\n//             </div>\r\n//             <button type=\"submit\" className=\"button010\" disabled={loading}>\r\n//               {loading ? 'Logging in...' : 'Login'}\r\n//             </button>\r\n//           </form>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n \r\n// export default Login; ","import React, { useState,lazy } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport './Register.css';\r\nconst DotSpinner = lazy(() => import('../DotSpinner/DotSpinner'));\r\n \r\nconst Register = () => {\r\n  const [formData, setFormData] = useState({\r\n    username: '',\r\n    mobile_number: '',\r\n    alternate_number: '',\r\n    password: '',\r\n    confirm_password: '',\r\n    address: '',\r\n  });\r\n \r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const navigate = useNavigate();\r\n \r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n \r\n    if (formData.password !== formData.confirm_password) {\r\n      setError(\"Passwords do not match\");\r\n      return;\r\n    }\r\n \r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('https://prasad-gz5p.onrender.com/api/register/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n \r\n      const responseData = await response.text();\r\n      console.log('Response:', responseData);\r\n \r\n      if (!response.ok) {\r\n        throw new Error(responseData || 'Registration failed');\r\n      }\r\n \r\n      const data = JSON.parse(responseData);\r\n      setSuccess(true);\r\n      setFormData({\r\n        username: '',\r\n        mobile_number: '',\r\n        alternate_number: '',\r\n        password: '',\r\n        confirm_password: '',\r\n        address: '',\r\n      });\r\n      setError(null);\r\n      navigate('/customer-home');\r\n \r\n    } catch (error) {\r\n      console.error(\"Registration error:\", error);\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n \r\n  return (\r\n    <div className=\"register-page007\">\r\n    {loading ? (\r\n          <DotSpinner />\r\n        ) : (\r\n      <div className=\"container007\">\r\n        <h1 className=\"heading007\">User Registration</h1>\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        {success && <p style={{ color: 'green' }}>Registration successful!</p>}\r\n        <form className=\"form007\" onSubmit={handleSubmit}>\r\n          <input\r\n            className=\"input007\"\r\n            type=\"text\"\r\n            name=\"username\"\r\n            placeholder=\"Username\"\r\n            value={formData.username}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          <input\r\n            className=\"input007\"\r\n            type=\"text\"\r\n            name=\"mobile_number\"\r\n            placeholder=\"Mobile Number\"\r\n            value={formData.mobile_number}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          <input\r\n            className=\"input007\"\r\n            type=\"text\"\r\n            name=\"alternate_number\"\r\n            placeholder=\"Alternate Number\"\r\n            value={formData.alternate_number}\r\n            onChange={handleChange}\r\n          />\r\n          <div className=\"password-container\">\r\n            <input\r\n              className=\"input007\"\r\n              type={showPassword ? 'text' : 'password'}\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <button type=\"button\" className=\"eye-button\" onClick={() => setShowPassword(!showPassword)}>\r\n              <FontAwesomeIcon icon={showPassword ? faEye : faEyeSlash} />\r\n            </button>\r\n          </div>\r\n          <div className=\"password-container\">\r\n            <input\r\n              className=\"input007\"\r\n              type={showConfirmPassword ? 'text' : 'password'}\r\n              name=\"confirm_password\"\r\n              placeholder=\"Confirm Password\"\r\n              value={formData.confirm_password}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <button type=\"button\" className=\"eye-button\" onClick={() => setShowConfirmPassword(!showConfirmPassword)}>\r\n              <FontAwesomeIcon icon={showConfirmPassword ? faEye : faEyeSlash} />\r\n            </button>\r\n          </div>\r\n          <textarea\r\n            className=\"input007\"\r\n            name=\"address\"\r\n            placeholder=\"Address\"\r\n            value={formData.address}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          <button type=\"submit\" className=\"login-button007\" disabled={loading}>\r\n            {loading ? 'Registering...' : 'Register'}\r\n          </button>\r\n        </form>\r\n        <p>\r\n          Already have an account?\r\n          <button onClick={() => navigate('/login')} className=\"login-link007\">\r\n            Login here\r\n          </button>\r\n        </p>\r\n      </div>\r\n    )}\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default Register;"],"names":["BasicBrands","lazy","BasicViewCart","BasicCheckout","BasicInvoice","BasicNavbar","BasicSupplier","BasicOrderHistory","BasicApp","customerDetails","setCustomerDetails","useState","username","mobile_number","isAuthenticated","setIsAuthenticated","localStorage","getItem","error","setError","useEffect","async","token","response","fetch","headers","ok","Error","data","json","message","fetchCustomerDetails","_jsxs","_Fragment","children","_jsx","Suspense","fallback","userName","onLogout","method","removeItem","console","className","Routes","Route","path","element","Navigate","to","Login","onLoginSuccess","handleLoginSuccess","Register","_ref","formData","setFormData","password","showPassword","setShowPassword","loading","setLoading","navigate","useNavigate","handleChange","e","name","value","target","style","color","onSubmit","preventDefault","loginResponse","body","JSON","stringify","errorData","setItem","log","homeResponse","homeData","redirect","type","placeholder","onChange","required","onClick","FontAwesomeIcon","icon","faEye","faEyeSlash","disabled","DotSpinner","alternate_number","confirm_password","address","success","setSuccess","showConfirmPassword","setShowConfirmPassword","responseData","text","parse"],"sourceRoot":""}