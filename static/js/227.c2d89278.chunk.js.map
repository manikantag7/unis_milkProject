{"version":3,"file":"static/js/227.c2d89278.chunk.js","mappings":"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","sources":["components/Customer/Brands/Brands.js"],"sourcesContent":["import React, { useEffect, useState, lazy, Suspense } from 'react';\r\nimport './Brands.css';\r\n\r\n// Lazy load DotSpinner component\r\nconst DotSpinner = lazy(() => import('../DotSpinner/DotSpinner'));\r\n\r\nconst Brands = () => {\r\n    const [brands, setBrands] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [products, setProducts] = useState([]);\r\n    const [selectedBrandID, setSelectedBrandID] = useState(null);\r\n    const [loadingProducts, setLoadingProducts] = useState(false);\r\n    const [viewingProducts, setViewingProducts] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchBrands = async () => {\r\n            const token = localStorage.getItem('authToken');\r\n            setLoading(true);\r\n            try {\r\n                const response = await fetch('https://prasad-gz5p.onrender.com/api/brands/', {\r\n                    headers: { 'Authorization': `Token ${token}` },\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch brands data');\r\n                }\r\n\r\n                const data = await response.json();\r\n                setBrands(data);\r\n            } catch (error) {\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchBrands();\r\n    }, []);\r\n\r\n    const fetchProducts = async (brandID) => {\r\n        setLoadingProducts(true);\r\n        try {\r\n            const response = await fetch('https://prasad-gz5p.onrender.com/api/products/');\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const data = await response.json();\r\n            const filteredProducts = data.filter(product => product.brandID === brandID);\r\n            setProducts(filteredProducts);\r\n            setSelectedBrandID(brandID);\r\n            setViewingProducts(true);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setLoadingProducts(false);\r\n        }\r\n    };\r\n\r\n    const handleViewProducts = (brandID) => {\r\n        fetchProducts(brandID);\r\n    };\r\n\r\n    const handleBackToBrands = () => {\r\n        setViewingProducts(false);\r\n        setProducts([]);\r\n        setSelectedBrandID(null);\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"loading-message\">\r\n                <Suspense fallback={<div>Loading...</div>}>\r\n                    <DotSpinner />\r\n                </Suspense>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return <div className=\"error-message\">Error: {error}</div>;\r\n    }\r\n\r\n    const filteredBrands = brands.filter((brand) =>\r\n        brand.brandName.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    return (\r\n        <div className=\"brand-list-container\">\r\n            {viewingProducts ? (\r\n                <div>\r\n                    <div className='back-button-cont1000'>\r\n                        <button className=\"back-button1000\" onClick={handleBackToBrands}>\r\n                            Back \r\n                        </button>\r\n                        <h2 className='product-head-1000'>Products for Brand ID: {selectedBrandID}</h2>\r\n                    </div>\r\n                    <div className=\"product-list-card-container1000\">\r\n                        {products.map((product) => (\r\n                            <div className=\"product-list-card1000\" key={product.productID}>\r\n                                <img\r\n                                    src={product.productImage}\r\n                                    alt={product.productCategory}\r\n                                    className=\"product-list-image1000\"\r\n                                    loading=\"lazy\" // Lazy load images\r\n                                />\r\n                                <h2 className=\"product-list-title1000\">{product.productCategory}</h2>\r\n                                <p className=\"product-list-description1000\">{product.productDescription}</p>\r\n                                <p className=\"product-list-volume1000\">Volume: {product.productVolume}</p>\r\n                                <p className=\"product-list-price1000\">Price: {product.productPrice}</p>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    <h1 className=\"brand-list-title\">Brand List</h1>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search brands...\"\r\n                        className=\"search-bar\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                    />\r\n                    <div className=\"card-container\">\r\n                        {filteredBrands.map((brand) => (\r\n                            <div className=\"brand-card\" key={brand.brandID}>\r\n                                <div className=\"logo-container\">\r\n                                    <img\r\n                                        src={brand.brandLogo}\r\n                                        alt={brand.brandName}\r\n                                        className=\"brand-logo\"\r\n                                        loading=\"lazy\" // Lazy load images\r\n                                    />\r\n                                </div>\r\n                                <h2 className=\"brand-name\">{brand.brandName}</h2>\r\n                                <button\r\n                                    className=\"update-button\"\r\n                                    onClick={() => handleViewProducts(brand.brandID)}>\r\n                                    View Products\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Brands;\r\n"],"names":["DotSpinner","lazy","Brands","brands","setBrands","useState","loading","setLoading","error","setError","searchTerm","setSearchTerm","products","setProducts","selectedBrandID","setSelectedBrandID","loadingProducts","setLoadingProducts","viewingProducts","setViewingProducts","useEffect","async","token","localStorage","getItem","response","fetch","headers","ok","Error","data","json","message","fetchBrands","handleViewProducts","brandID","filteredProducts","filter","product","err","fetchProducts","_jsx","className","children","Suspense","fallback","_jsxs","filteredBrands","brand","brandName","toLowerCase","includes","onClick","handleBackToBrands","map","src","productImage","alt","productCategory","productDescription","productVolume","productPrice","productID","_Fragment","type","placeholder","value","onChange","e","target","brandLogo"],"sourceRoot":""}