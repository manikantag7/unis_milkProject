{"version":3,"file":"static/js/255.3eeec773.chunk.js","mappings":"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","sources":["components/Admin/adminHome/customers/CustomersData.js","components/Admin/spinner/Spinner.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport './CustomersData.css';\r\nimport Spinner from '../../spinner/Spinner';\r\n\r\nfunction CustomersData() {\r\n    const [, setCustomerDetails] = useState({ username: '', mobile_number: '' });\r\n    const [, setError] = useState(null);\r\n    const [customerData, setCustomerData] = useState([]);\r\n    const [filteredCustomers, setFilteredCustomers] = useState([]);\r\n    const [selectedCustomer, setSelectedCustomer] = useState({ id: '', mobile_number: '' });\r\n    const [customerDropdownOpen, setCustomerDropdownOpen] = useState(false);\r\n    const [customerSearchQuery, setCustomerSearchQuery] = useState('');\r\n    const [customerProducts, setCustomerProducts] = useState([]);\r\n    const [loadingProducts, setLoadingProducts] = useState(false);\r\n    const [loadingCustomers, setLoadingCustomers] = useState(false); // New loading state\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        customer_id: '',\r\n        product_id: '',\r\n        new_price: ''\r\n    });\r\n    const [popupMessage, setPopupMessage] = useState('');\r\n    const [isPopupVisible, setIsPopupVisible] = useState(false);\r\n    const [productSearchQuery, setProductSearchQuery] = useState('');\r\n    const [filteredProducts, setFilteredProducts] = useState([]);\r\n\r\n    // const dropdownRef = useRef(null);\r\n    const customerDropdownRef = useRef(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            navigate('/login');\r\n            return;\r\n        }\r\n\r\n        const fetchCustomerData = async () => {\r\n            setLoadingCustomers(true); // Start loading\r\n            try {\r\n                const response = await fetch('https://prasad-gz5p.onrender.com/api/manage-negotiated-prices/', {\r\n                    headers: { 'Authorization': `Token ${token}` },\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Failed to fetch customer data`);\r\n                }\r\n\r\n                const data = await response.json();\r\n                setCustomerData(data.customers);\r\n                setFilteredCustomers(data.customers);\r\n            } catch (error) {\r\n                setError(error.message);\r\n            } finally {\r\n                setLoadingCustomers(false); // End loading\r\n            }\r\n        };\r\n\r\n        fetchCustomerDetails();\r\n        fetchCustomerData();\r\n    }, [navigate]);\r\n\r\n    useEffect(() => {\r\n        const filtered = customerData.filter(customer =>\r\n            customer.mobile_number.includes(customerSearchQuery)\r\n        );\r\n        setFilteredCustomers(filtered);\r\n    }, [customerSearchQuery, customerData]);\r\n\r\n    const handleSelectCustomer = (customer) => {\r\n        setSelectedCustomer({ id: customer.id, mobile_number: customer.mobile_number });\r\n        setCustomerDropdownOpen(false);\r\n    };\r\n\r\n    const fetchCustomerDetails = async () => {\r\n        const token = localStorage.getItem('authToken');\r\n        try {\r\n            const response = await fetch('https://prasad-gz5p.onrender.com/api/user/details/', {\r\n                headers: { 'Authorization': `Token ${token}` },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch customer details`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setCustomerDetails({ username: data.username, mobile_number: data.mobile_number });\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n    };\r\n\r\n    const fetchCustomerProducts = async () => {\r\n        const token = localStorage.getItem('authToken');\r\n        setLoadingProducts(true);\r\n        try {\r\n            const response = await fetch(`https://prasad-gz5p.onrender.com/api/manage-negotiated-prices/?customer=${selectedCustomer.id}`, {\r\n                headers: { 'Authorization': `Token ${token}` },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch customer products`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setCustomerProducts(data.products);\r\n            setFilteredProducts(data.products);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        } finally {\r\n            setLoadingProducts(false);\r\n        }\r\n    };\r\n\r\n    const handleSubmitCustomer = async () => {\r\n        if (selectedCustomer.id) {\r\n            await fetchCustomerProducts();\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const token = localStorage.getItem('authToken');\r\n\r\n        try {\r\n            const response = await fetch('https://prasad-gz5p.onrender.com/api/manage-negotiated-prices/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Token ${token}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to update price`);\r\n            }\r\n\r\n            setCustomerProducts((prevProducts) => {\r\n                const updatedProducts = prevProducts.map((product) =>\r\n                    product.id === formData.product_id\r\n                        ? { ...product, final_price: formData.new_price }\r\n                        : product\r\n                );\r\n                return updatedProducts;\r\n            });\r\n\r\n            setPopupMessage('Price updated successfully!');\r\n        } catch (error) {\r\n            setPopupMessage('Error: ' + error.message);\r\n        } finally {\r\n            setIsModalOpen(false);\r\n            setFormData({\r\n                customer_id: '',\r\n                product_id: '',\r\n                new_price: ''\r\n            });\r\n\r\n            setIsPopupVisible(true);\r\n            setTimeout(() => {\r\n                setIsPopupVisible(false);\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleCancelSelection = () => {\r\n        setSelectedCustomer({ id: '', mobile_number: '' });\r\n        setCustomerProducts([]); // Clear fetched products\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event) => {\r\n            if (customerDropdownRef.current && !customerDropdownRef.current.contains(event.target)) {\r\n                setCustomerDropdownOpen(false);\r\n            }\r\n        };\r\n \r\n        document.addEventListener('mousedown', handleClickOutside);\r\n \r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, [customerDropdownRef]);\r\n\r\n    useEffect(() => {\r\n        const filtered = customerProducts.filter(product =>\r\n            (product.category && product.category.toLowerCase().includes(productSearchQuery.toLowerCase())) || (product.volume && product.volume.toLowerCase().includes(productSearchQuery.toLowerCase())) || (product.new_price && product.new_price.toLowerCase().includes(productSearchQuery.toLowerCase()))\r\n        );\r\n        setFilteredProducts(filtered);\r\n    }, [productSearchQuery, customerProducts]);\r\n    \r\n\r\n    return (\r\n        <div className=\"customer-home1p7\">\r\n            <h2>Customers</h2>\r\n            <div className=\"customer-sectionp7\">\r\n                <div className=\"dropdownp7\" ref={customerDropdownRef}>\r\n                    <button\r\n                        onClick={() => {\r\n                            setCustomerDropdownOpen(!customerDropdownOpen);\r\n                            if (!customerDropdownOpen) {\r\n                                customerDropdownRef.current.classList.add('dropdown-open');\r\n                            } else {\r\n                                customerDropdownRef.current.classList.remove('dropdown-open');\r\n                            }\r\n                        }}\r\n                        className=\"dropdown-togglep7\"\r\n                    >\r\n                        {selectedCustomer.mobile_number ? (\r\n                            <>\r\n                                {selectedCustomer.mobile_number}\r\n                                <span className=\"cancel-iconp7\" onClick={handleCancelSelection}>&times;</span>\r\n                            </>\r\n                        ) : 'Select a Customer'}\r\n                    </button>\r\n                    {customerDropdownOpen && (\r\n                        <div className=\"dropdown-menup7\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Search by mobile number\"\r\n                                value={customerSearchQuery}\r\n                                onChange={(e) => setCustomerSearchQuery(e.target.value)}\r\n                                className=\"search-inputp7\"\r\n                            />\r\n\r\n                            <div className=\"customer-list-containerp7\">\r\n                                {loadingCustomers ? (\r\n                                    \r\n                                    <div className=\"loader\">Loading customers...</div> // Loader for customers\r\n                                    \r\n                                ) : filteredCustomers.length ? (\r\n                                    <ul className=\"customer-listp7\">\r\n                                        {filteredCustomers.map((customer, index) => (\r\n                                            <li key={index} onClick={() => handleSelectCustomer(customer)}>\r\n                                                {customer.mobile_number}\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                ) : (\r\n                                    <p className=\"no-customersp7\">No customers found</p>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                <button onClick={handleSubmitCustomer} className=\"btn-submitp7\" disabled={!selectedCustomer.id}>\r\n                    Submit Customer\r\n                </button>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search...\"\r\n                    value={productSearchQuery}\r\n                    onChange={(e) => setProductSearchQuery(e.target.value)}\r\n                    className=\"search-barp7\"\r\n                />\r\n            </div>\r\n\r\n            {loadingProducts ? (\r\n                <div className=\"spinnerp7\">\r\n                    <Spinner />\r\n                </div>\r\n            ) : (\r\n                selectedCustomer.id && customerProducts.length > 0 && (\r\n                    <div>\r\n                        <div className='product-card-containerp7'>\r\n                            {filteredProducts.map((product, index) => (\r\n                                <div key={index} className=\"cardp7\">\r\n                                    <div className=\"image_containerp7\">\r\n                                        <img src={product.image_url} alt={product.description} className=\"imagep7\" />\r\n                                    </div>\r\n                                    <div className=\"bottom-sectionp7\">\r\n                                        <div className=\"titlep7\">\r\n                                            <p><span>{product.category}</span></p>\r\n                                        </div> <hr className='border'/>\r\n                                        {/* <div className=\"descriptionp7\">\r\n                                            <p>{product.description}</p>\r\n                                        </div> */}\r\n                                        <div className=\"volumep7\">\r\n                                            <span className=\"qty\">Volume: <span className=\"volume-valuep7\">{product.volume}</span></span>\r\n                                        </div>\r\n                                        <hr className='border'/>\r\n                                        <p className='Final_pricep7'>Price: ₹{product.final_price}</p>\r\n                                        {product.new_price && (\r\n                                            <p style={{ color: 'red' }}>New Price: ₹{product.new_price}</p>\r\n                                        )}\r\n                                    </div>\r\n                                    <button className=\"edit-buttonp7\" onClick={() => {\r\n                                        setFormData({\r\n                                            customer_id: selectedCustomer.id,\r\n                                            product_id: product.id,\r\n                                            new_price: ''\r\n                                        });\r\n                                        setIsModalOpen(true);\r\n                                    }}>\r\n                                        Edit Price\r\n                                    </button>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            )}\r\n\r\n            {isPopupVisible && (\r\n                <div className=\"popup-notificationp7\">\r\n                    {popupMessage}\r\n                </div>\r\n            )}\r\n\r\n            {isModalOpen && (\r\n                <div className=\"modalp7\">\r\n                    <div className=\"modal-contentp7\">\r\n                        <h2>Edit Product Price for Customer</h2>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <label>\r\n                                Customer ID:\r\n                                <input\r\n                                    type=\"number\"\r\n                                    name=\"customer_id\"\r\n                                    value={formData.customer_id}\r\n                                    readOnly\r\n                                />\r\n                            </label>\r\n                            <label>\r\n                                Product ID:\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"product_id\"\r\n                                    value={formData.product_id}\r\n                                    readOnly\r\n                                />\r\n                            </label>\r\n                            <label>\r\n                                New Price:\r\n                                <input\r\n                                    type=\"number\"\r\n                                    name=\"new_price\"\r\n                                    value={formData.new_price}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                />\r\n                            </label>\r\n                            <button type=\"submit\">Submit</button>\r\n                            <button type=\"button\" onClick={() => setIsModalOpen(false)}>Cancel</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomersData;\r\n","import React from 'react';\r\nimport './Spinner.css'; // Make sure to import the CSS file\r\n \r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"dot-spinner-container\">\r\n      <div className=\"dot-spinner\">\r\n        {Array.from({ length: 8 }, (_, index) => (\r\n          <div key={index} className={`dot-spinner__dot dot-spinner__dot--${index + 1}`}></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default Spinner;"],"names":["setCustomerDetails","useState","username","mobile_number","setError","customerData","setCustomerData","filteredCustomers","setFilteredCustomers","selectedCustomer","setSelectedCustomer","id","customerDropdownOpen","setCustomerDropdownOpen","customerSearchQuery","setCustomerSearchQuery","customerProducts","setCustomerProducts","loadingProducts","setLoadingProducts","loadingCustomers","setLoadingCustomers","isModalOpen","setIsModalOpen","formData","setFormData","customer_id","product_id","new_price","popupMessage","setPopupMessage","isPopupVisible","setIsPopupVisible","productSearchQuery","setProductSearchQuery","filteredProducts","setFilteredProducts","customerDropdownRef","useRef","navigate","useNavigate","useEffect","token","localStorage","getItem","fetchCustomerDetails","async","response","fetch","headers","ok","Error","data","json","customers","error","message","fetchCustomerData","filtered","filter","customer","includes","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","product","category","toLowerCase","volume","_jsxs","className","children","_jsx","ref","onClick","classList","remove","add","_Fragment","handleCancelSelection","type","placeholder","value","onChange","e","length","map","index","handleSelectCustomer","products","fetchCustomerProducts","disabled","Spinner","src","image_url","alt","description","final_price","style","color","onSubmit","preventDefault","method","body","JSON","stringify","prevProducts","setTimeout","name","readOnly","required","Array","from","_"],"sourceRoot":""}