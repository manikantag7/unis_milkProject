{"version":3,"file":"static/js/308.fcb88a8a.chunk.js","mappings":"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","sources":["components/Customer/OrderHistory/OrderHistory.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import './OrderHistory.css';\r\n// import DotSpinner from '../DotSpinner/DotSpinner';\r\n \r\n// const OrderHistory = () => {\r\n//   const [orderDetails, setOrderDetails] = useState([]);\r\n//   const [error, setError] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const navigate = useNavigate();\r\n \r\n//   const fetchOrder = async () => {\r\n//     const token = localStorage.getItem('authToken');\r\n \r\n//     try {\r\n//       const response = await fetch(`https://prasad-gz5p.onrender.com/api/order-history/`, {\r\n//         headers: { 'Authorization': `Token ${token}` },\r\n//       });\r\n \r\n//       if (!response.ok) {\r\n//         throw new Error(`Failed to fetch order history`);\r\n//       }\r\n \r\n//       const orderData = await response.json();\r\n//       setOrderDetails(orderData.orders || []);\r\n//       setError(null);\r\n//     } catch (error) {\r\n//       setError(error.message);\r\n//     } finally {\r\n//       setLoading(false); // Set loading to false after fetching\r\n//     }\r\n//   };\r\n \r\n//   const viewInvoice = async (orderId) => {\r\n//     const token = localStorage.getItem('authToken');\r\n//     try {\r\n//       const response = await fetch(`https://prasad-gz5p.onrender.com/api/view-invoice/${orderId}/`, {\r\n//         headers: { 'Authorization': `Token ${token}` },\r\n//       });\r\n \r\n//       if (!response.ok) {\r\n//         throw new Error(`Failed to get Invoice`);\r\n//       }\r\n \r\n//       const invoiceData = await response.json();\r\n//       console.log(invoiceData.items);\r\n//       setError(null);\r\n//     } catch (error) {\r\n//       setError(error.message);\r\n//     } finally {\r\n//     }\r\n//   };\r\n \r\n//   const handleViewInvoice = (orderId) => {\r\n//     viewInvoice(orderId);\r\n//     navigate(`/invoice`); // Navigate to the invoice page\r\n//   };\r\n \r\n//   useEffect(() => {\r\n//     fetchOrder(); // Fetch order history on component mount\r\n//   }, []); // Empty dependency array ensures it runs only once\r\n \r\n//   return (\r\n//     <div className=\"order-history\">\r\n//       <div className='order-history-container'>\r\n//       <h2>Your Order History</h2>\r\n//       <button onClick={() => navigate('/customer-home')} className=\"back-button999\">\r\n//         Back to Home\r\n//       </button>\r\n//       </div>\r\n//       <div className='order-history1'>\r\n//       {loading ? (\r\n//         <>\r\n//         <div className='order-spinner-123'> <DotSpinner /> </div>\r\n//         </>\r\n        \r\n//       ) : (\r\n       \r\n//         <>\r\n        \r\n//           {error && <p className=\"error-message\">{error}</p>}\r\n//           {orderDetails.length > 0 ? (\r\n//             <ul className=\"order-list\">\r\n//               {orderDetails.map((item, index) => (\r\n//                 <li key={index} className=\"order-item\">\r\n//                   <div className=\"order-info\">\r\n//                     <div>Order ID: {item.id}</div>\r\n//                     <div>Price of Products: â‚¹{item.price}</div>\r\n//                     <button\r\n//                       className=\"view-invoice-button\"\r\n//                       onClick={() => handleViewInvoice(item.id)}\r\n//                     >\r\n//                       View Invoice\r\n//                     </button>\r\n//                   </div>\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           ) : (\r\n//             <p>Your order history is empty</p>\r\n//           )}\r\n         \r\n//         </>\r\n//       )}  \r\n//     </div>\r\n//     </div>\r\n//   );\r\n// };\r\n \r\n// export default OrderHistory;\r\n \r\n \r\n\r\n\r\n\r\nimport React, { useEffect, useState, lazy } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './OrderHistory.css';\r\nconst DotSpinner = lazy(() => import('../DotSpinner/DotSpinner'));\r\n \r\nconst OrderHistory = () => {\r\n  const [orderDetails, setOrderDetails] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [invoiceData, setInvoiceData] = useState(null);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 7; // Number of items to display per page\r\n  const navigate = useNavigate();\r\n \r\n  const fetchOrder = async () => {\r\n    const token = localStorage.getItem('authToken');\r\n \r\n    try {\r\n      const response = await fetch(`https://prasad-gz5p.onrender.com/api/order-history/`, {\r\n        headers: { 'Authorization': `Token ${token}` },\r\n      });\r\n \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch order history`);\r\n      }\r\n \r\n      const orderData = await response.json();\r\n      // Reverse the order data to show newest first\r\n      setOrderDetails(orderData.orders ? orderData.orders.reverse() : []);\r\n      setError(null);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n \r\n  const viewInvoice = async (orderId) => {\r\n    const token = localStorage.getItem('authToken');\r\n    try {\r\n      const response = await fetch(`https://prasad-gz5p.onrender.com/api/view-invoice/${orderId}/`, {\r\n        headers: { 'Authorization': `Token ${token}` },\r\n      });\r\n \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to get Invoice`);\r\n      }\r\n \r\n      const invoiceData = await response.json();\r\n      setInvoiceData(invoiceData);\r\n      setModalOpen(true);\r\n      setError(null);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n \r\n  const handleViewInvoice = (orderId) => {\r\n    viewInvoice(orderId);\r\n  };\r\n \r\n  const closeModal = () => {\r\n    setModalOpen(false);\r\n    setInvoiceData(null);\r\n  };\r\n \r\n  // Pagination Logic\r\n  const indexOfLastOrder = currentPage * itemsPerPage;\r\n  const indexOfFirstOrder = indexOfLastOrder - itemsPerPage;\r\n  const currentOrders = orderDetails.slice(indexOfFirstOrder, indexOfLastOrder);\r\n  const totalPages = Math.ceil(orderDetails.length / itemsPerPage);\r\n \r\n  const handleNextPage = () => {\r\n    if (currentPage < totalPages) {\r\n      setCurrentPage(prevPage => prevPage + 1);\r\n    }\r\n  };\r\n \r\n  const handlePreviousPage = () => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage(prevPage => prevPage - 1);\r\n    }\r\n  };\r\n \r\n  useEffect(() => {\r\n    fetchOrder(); // Fetch order history on component mount\r\n  }, []);\r\n \r\n  return (\r\n    <div className=\"order-historyV890\">\r\n      <div className='order-history-containerV890'>\r\n        <p className=\"order-history-title-V890\">Your Order History</p>\r\n        <button onClick={() => navigate('/customer-home')} className=\"back-button999V890\">\r\n          Back to Home\r\n        </button>\r\n      </div>\r\n      <div className='order-history1V890'>\r\n        {loading ? (\r\n          <div className='order-spinner'><DotSpinner /></div>\r\n        ) : (\r\n          <>\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {orderDetails.length > 0 ? (\r\n              <>\r\n                <table className=\"order-tableV890\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Order ID</th>\r\n                      <th>Price of Products</th>\r\n                      <th>Action</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {currentOrders.map((item, index) => (\r\n                      <tr key={index} className=\"order-itemV890\">\r\n                        <td>{item.id}</td>\r\n                        <td>â‚¹{item.price}</td>\r\n                        <td>\r\n                          <button\r\n                            className=\"view-invoice-buttonV890\"\r\n                            onClick={() => handleViewInvoice(item.id)}\r\n                          >\r\n                            View Invoice\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n                <div className=\"pagination-controls\">\r\n                  <button onClick={handlePreviousPage} disabled={currentPage === 1}>\r\n                    Previous\r\n                  </button>\r\n                  <span>Page {currentPage} of {totalPages}</span>\r\n                  <button onClick={handleNextPage} disabled={currentPage === totalPages}>\r\n                    Next\r\n                  </button>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <p>Your order history is empty</p>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n \r\n      {/* Modal for displaying invoice details */}\r\n      {modalOpen && (\r\n  <div className=\"modal-overlayV890\" onClick={closeModal}>\r\n    <div className=\"modal-contentV890\" onClick={(e) => e.stopPropagation()}>\r\n      <h2>Invoice Details</h2>\r\n      {invoiceData && (\r\n        <>\r\n          <h3>Invoice ID: {invoiceData.invoice_id}</h3>\r\n          <table className=\"invoice-tableV890\">\r\n            <thead>\r\n              <tr>\r\n                <th>Product ID</th>\r\n                <th>Quantity</th>\r\n                <th>Total Price</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {invoiceData.items.slice().reverse().map((item, index) => (\r\n                <tr key={index}>\r\n                  <td>{item.product_id}</td>\r\n                  <td>{item.quantity}</td>\r\n                  <td>â‚¹{item.total_price}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </>\r\n      )}\r\n      <button className=\"close-buttonV890\" onClick={closeModal}>Close</button>\r\n    </div>\r\n  </div>\r\n)}\r\n \r\n    </div>\r\n  );\r\n};\r\n \r\nexport default OrderHistory;\r\n"],"names":["DotSpinner","lazy","OrderHistory","orderDetails","setOrderDetails","useState","error","setError","loading","setLoading","modalOpen","setModalOpen","invoiceData","setInvoiceData","currentPage","setCurrentPage","navigate","useNavigate","handleViewInvoice","orderId","async","token","localStorage","getItem","response","fetch","headers","ok","Error","json","message","viewInvoice","closeModal","indexOfLastOrder","indexOfFirstOrder","currentOrders","slice","totalPages","Math","ceil","length","useEffect","orderData","orders","reverse","fetchOrder","_jsxs","className","children","_jsx","onClick","_Fragment","map","item","index","id","price","handlePreviousPage","prevPage","disabled","handleNextPage","e","stopPropagation","invoice_id","items","product_id","quantity","total_price"],"sourceRoot":""}